type game = 
keep account of multiple states
create seperate modules for:
	-myopic bot
	-game-state: define game type, conversion functions, example - road size, number of settlements/cities
	-have two seperate states - one all seeing state, one from current players perspective? 

****** DESIGN *******
handle-move
-basic functionality and full moveset functions
-takes a move, and updates the game state after applying move
-update trophies to player

presentation
-filter out given state such that players cannot see what they are not allowed

make game type a record, flatten all elements in state

OLD game.ml

  (*CHANGE!*)
  (*Check win conditions. If someone wins return (Some winning_color, updated_game)
  otherwise, return (None, updated_game)*)

(* OLD--Use the new version above
let handle_move g m = 
  (*I'm guessing we'll want to keep track of the request that m corresponds to.
  Maybe that's in turn/next*)
  match m with
  | InitialMove l -> failwith "not implemented" 
    (*Check for valid placement. If the placement is valid, 
    update the map. Otherwise, insert a minimum viable move?*)
  | RobberMove (p, c_opt) -> robber_helper g (p, c_opt)

    (*actually, never mind-- I ought to move this code to the body of validmove*)
    (*
    let valid_moves = valid_inital_moves g in
      if (List.mem) ((=) l) valid_moves then
        (*update game state*)
      else 
        let move = get_some (pick_random valid_moves) in
          (*update game state*)
      *)

    (*Assuming p is a valid location, change 
    the board's robber location to p. Then remove a random resource from
    the player with color c_opt and give it to the active player*)
  | DiscardMove c -> discard_helper g c
(*     I assume this involves subtracting c from the player
    who made the discard move. I'm not quite sure how you tell which player
    discarded, though *)
  | TradeResponse b -> trade_helper g b
    (*If true, then conduct the trade (and don't conduct
    the trade if false). Then return control to the active player.*)
  | Action a ->
    begin
      match a with
      | RollDice -> failwith "not implemented"
        (*Generate a random dice roll. If seven, handle discards, then ask the
        active player where they want to place the robber*)
      | MaritimeTrade x -> maritime_helper g x
        (*check that the player can
        conduct this trade. If so, take away r_sold from the active 
        player and give them r_bought.*)
      | DomesticTrade x -> domestic_helper g x
        (*Send a trade request to other player*)
      | BuyBuild b -> buyBuild_helper g b
      | PlayCard pc -> playCard_helper g pc
      | EndTurn -> failwith "not implemented"
        (*Pass control to the next player*)
    end
    

  if validmove g m  then
    begin
    (*I'm guessing we'll want to keep track of the request that m corresponds to.
    Maybe that's in turn/next*)
    match m with
    | InitialMove l -> failwith "not implemented" 

      (*actually, never mind-- I ought to move this code to the body of validmove*)
      (*
      let valid_moves = valid_inital_moves g in
        if (List.mem) ((=) l) valid_moves then
          (*update game state*)
        else 
          let move = get_some (pick_random valid_moves) in
            (*update game state*)
        *)

    | RobberMove (p, c_opt) -> failwith "not implemented"
      (*Assuming p is a valid location, change 
      the board's robber location to p. Then remove a random resource from
      the player with color c_opt and give it to the active player*)
    | DiscardMove c -> failwith "not implemented"
  (*     I assume this involves subtracting c from the player
      who made the discard move. I'm not quite sure how you tell which player
      discarded, though *)
    | TradeResponse b -> failwith "not implemented"
      (*If true, then conduct the trade (and don't conduct
      the trade if false). Then return control to the active player.*)
    | Action a ->
      begin
        match a with
        | RollDice -> failwith "not implemented"
          (*Generate a random dice roll. If seven, handle discards, then ask the
          active player where they want to place the robber*)
        | MaritimeTrade (r_sold, r_bought) -> failwith "not implemented"
          (*check that the player can
          conduct this trade. If so, take away r_sold from the active 
          player and give them r_bought.*)
        | DomesticTrade (other_player, active_player_cost, other_player_cost) ->
          failwith "not implemented"
          (*Send a trade request to other player*)
        | BuyBuild b ->
          begin
            match b with
            |BuildRoad rd -> failwith "not implemented"
            | BuildTown pt -> failwith "not implemented"
            | BuildCity pt -> failwith "not implemented"
            | BuildCard -> failwith "not implemented"
          end
        | PlayCard pc ->
          begin
            match pc with
            | PlayKnight r -> failwith "not implemented"
            | PlayRoadBuilding (rd, rd_o) -> failwith "not implemented"
            | PlayYearOfPlenty (r, r_o) -> failwith "not implemented"
            | PlayMonopoly r -> failwith "not implemented"
          end 
        | EndTurn -> failwith "not implemented"
          (*Pass control to the next player*)
      end
    end
  else 
    begin
      match g.next with | None 
    end

*)
